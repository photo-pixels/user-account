// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type AuthStatus string

const (
	AuthStatusNOTACTIVATED AuthStatus = "NOT_ACTIVATED"
	AuthStatusSENTINVITE   AuthStatus = "SENT_INVITE"
	AuthStatusACTIVATED    AuthStatus = "ACTIVATED"
	AuthStatusBLOCKED      AuthStatus = "BLOCKED"
)

func (e *AuthStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AuthStatus(s)
	case string:
		*e = AuthStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for AuthStatus: %T", src)
	}
	return nil
}

type NullAuthStatus struct {
	AuthStatus AuthStatus
	Valid      bool // Valid is true if AuthStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAuthStatus) Scan(value interface{}) error {
	if value == nil {
		ns.AuthStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AuthStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAuthStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AuthStatus), nil
}

type CodeType string

const (
	CodeTypeACTIVATEINVITE       CodeType = "ACTIVATE_INVITE"
	CodeTypeACTIVATEREGISTRATION CodeType = "ACTIVATE_REGISTRATION"
)

func (e *CodeType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CodeType(s)
	case string:
		*e = CodeType(s)
	default:
		return fmt.Errorf("unsupported scan type for CodeType: %T", src)
	}
	return nil
}

type NullCodeType struct {
	CodeType CodeType
	Valid    bool // Valid is true if CodeType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCodeType) Scan(value interface{}) error {
	if value == nil {
		ns.CodeType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CodeType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCodeType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CodeType), nil
}

type RefreshTokenStatus string

const (
	RefreshTokenStatusACTIVE  RefreshTokenStatus = "ACTIVE"
	RefreshTokenStatusREVOKED RefreshTokenStatus = "REVOKED"
	RefreshTokenStatusEXPIRED RefreshTokenStatus = "EXPIRED"
	RefreshTokenStatusLOGOUT  RefreshTokenStatus = "LOGOUT"
)

func (e *RefreshTokenStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RefreshTokenStatus(s)
	case string:
		*e = RefreshTokenStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for RefreshTokenStatus: %T", src)
	}
	return nil
}

type NullRefreshTokenStatus struct {
	RefreshTokenStatus RefreshTokenStatus
	Valid              bool // Valid is true if RefreshTokenStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRefreshTokenStatus) Scan(value interface{}) error {
	if value == nil {
		ns.RefreshTokenStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RefreshTokenStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRefreshTokenStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RefreshTokenStatus), nil
}

type Auth struct {
	UserID       uuid.UUID
	CreatedAt    time.Time
	UpdatedAt    time.Time
	Email        string
	PasswordHash []byte
	Status       AuthStatus
}

type Code struct {
	Code      string
	UserID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Active    bool
	Type      CodeType
}

type GooseDbVersion struct {
	ID        int
	VersionID int64
	IsApplied bool
	Tstamp    pgtype.Timestamp
}

type Permission struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Name        string
	Description string
}

type RefreshToken struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Status    RefreshTokenStatus
}

type Role struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Name        string
	Description string
}

type RolePermission struct {
	PermissionID uuid.UUID
	RoleID       uuid.UUID
	CreatedAt    time.Time
}

type User struct {
	ID         uuid.UUID
	Firstname  string
	Surname    string
	Patronymic *string
	CreatedAt  time.Time
	UpdatedAt  time.Time
}

type UserRole struct {
	UserID    uuid.UUID
	RoleID    uuid.UUID
	CreatedAt time.Time
}
